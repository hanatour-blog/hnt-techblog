{"version":3,"file":"component---src-templates-post-template-tsx-992d1744c13e2d87e7b1.js","mappings":"wOAcA,IAAMA,GAAe,gJAUfC,GAAkBC,EAAAA,EAAAA,IAAO,SAACC,GAAD,OAC7BC,EAAAA,EAAAA,IAACC,EAAAA,GAAD,UAAiBF,EAAjB,CAAwBG,MAAO,CAAEC,SAAU,cADrB,uBAAAL,CAAHM,CAAAA,KAAAA,UAAAA,OAAAA,yHAsBrB,EARmD,YAA0B,IAAdC,EAAa,EAAbA,UAC7D,OACEL,EAAAA,EAAAA,IAACJ,EAAD,MACEI,EAAAA,EAAAA,IAACH,EAAD,CAAiBS,MAAOD,EAAWE,IAAI,cAH7C,EC/BA,IAAMC,GAAgB,+9BAgItB,EAJyD,YAAqB,IAATC,EAAQ,EAARA,KACnE,OAAOT,EAAAA,EAAAA,IAACQ,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,IAD9D,E,UCjIA,IAaMG,GAAiB,uGAkCvB,EA5ByC,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IA5BM,gCA6BNC,KA5BO,oCA6BP,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDd,EAAWe,aAAaF,EAAKC,EAD/B,IAIAlB,EAAQG,QAAQiB,YAAYhB,EAlBQ,CAD7B,GAoBN,KAEIjB,EAAAA,EAAAA,IAACY,EAAD,CAAmBsB,IAAKrB,GAzBjC,ECqDA,EApC2D,YAKxD,IAHsBsB,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAEZ,EAcIH,EAAM,GAbRK,KACE/B,EAFJ,EAEIA,KAFJ,IAGIgC,YACEC,EAJN,EAIMA,MACAC,EALN,EAKMA,QACAC,EANN,EAMMA,KACAC,EAPN,EAOMA,WAPN,IAQMxC,UACqByC,EAT3B,EASQC,gBAAmBD,gBACnBE,EAVR,EAUQA,UAMR,OACEhD,EAAAA,EAAAA,IAACiD,EAAAA,EAAD,CAAUP,MAAOA,EAAOQ,YAAaP,EAASQ,IAAKb,EAAMhC,MAAO0C,IAC9DhD,EAAAA,EAAAA,IAACoD,EAAD,CACEV,MAAOA,EACPE,KAAMA,EACNC,WAAYA,EACZxC,UAAWyC,KAEb9C,EAAAA,EAAAA,IAACqD,EAAD,CAAa5C,KAAMA,KACnBT,EAAAA,EAAAA,IAACsD,EAAD,MA/BN,C","sources":["webpack://gatsby-starter-default/./src/components/post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  z-index: -1;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({ thumbnail }) {\n  return (\n    <PostHeadWrapper>\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 80px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'hyungkiShin/hyungkiShin.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types' // 바로 아래에서 정의할 것입니다\nimport Template from 'components/common/Template'\nimport PostHead from 'components/post/PostHead'\nimport PostContent from 'components/post/PostContent'\nimport CommentWidget from 'components/post/CommentWidget'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\n\n// const PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n//   data: {\n//     allMarkdownRemark: { edges },\n//   },\n// }) {\n//   const {\n//     node: { html, frontmatter },\n//   } = edges[0];\n\n//   return (\n//     <Template>\n//       <PostHead {...frontmatter} />\n//       <PostContent html={html} />\n//       <CommentWidget />\n//     </Template>\n//   )\n// }\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"names":["PostHeadWrapper","BackgroundImage","_styled","props","___EmotionJSX","GatsbyImage","style","position","process","thumbnail","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","title","summary","date","categories","gatsbyImageData","childImageSharp","publicURL","Template","description","url","PostHead","PostContent","CommentWidget"],"sourceRoot":""}